options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: waterfall_image
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: waterfall_image
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: img_width
  id: variable
  parameters:
    comment: ''
    value: '608'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 236.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '40000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12.0]
    rotation: 0
    state: enabled
- name: blocks_vector_to_stream_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: img_width
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 184.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nfrom PIL import Image\n\
      \n\nclass blk(gr.sync_block):\n    \"\"\"Embedded Python Block example - convert\
      \ image to frequency-domain data for waterfall plot\"\"\"\n\n    def _get_iq_image(self,\
      \ input_file):\n        # \u8BFB\u53D6\u56FE\u7247\n        image = Image.open(input_file)\n\
      \        # \u5C06\u56FE\u7247\u8F6C\u6362\u4E3A\u7070\u5EA6\u56FE\n        gray_image\
      \ = image.convert('L')\n        # \u5C06\u7070\u5EA6\u56FE\u8F6C\u6362\u4E3A\
      mxn\u7684\u6570\u7EC4\n        image_array = np.array(gray_image)\n        #\
      \ \u8BBE\u5B9A\u9608\u503C\uFF0C\u8FD9\u91CC\u53D6128\n        threshold = 128\n\
      \        # \u8FDB\u884C\u4E8C\u503C\u5316\u5904\u7406\n        binary_image_array\
      \ = np.where(image_array > threshold, 255, 0).astype(np.uint8)\n        # \u5C06\
      \u4E8C\u503C\u5316\u540E\u7684\u6570\u7EC4\u8F6C\u6362\u56DE\u56FE\u7247\n \
      \       binary_image = Image.fromarray(binary_image_array)\n        # \u4FDD\
      \u5B58\u4E8C\u503C\u5316\u540E\u7684\u56FE\u7247\n        binary_image.save('binary_example.jpg')\n\
      \n        rows, columns = binary_image_array.shape\n        frequency_step =\
      \ 10e3  # 10 kHz \u9891\u7387\u6B65\u957F\n        iq_image = []\n        for\
      \ i in range(rows):\n            # \u521D\u59CB\u5316\u5F53\u524D\u884C\u7684\
      \u9891\u8C31\u6570\u636E\n            spectrum = np.zeros(columns, dtype=np.complex64)\n\
      \            for j in range(columns):\n                if binary_image_array[i][j]\
      \ == 0:\n                    # \u5F53\u7B2C j \u4E2A\u4F4D\u7F6E\u4E3A 0 \u65F6\
      \uFF0C\u8BA9 j * 10 kHz \u7684\u9891\u7387\u6709\u6548\n                   \
      \ spectrum[j] = 1.0 + 0j\n            iq_image.append(spectrum)\n        return\
      \ np.array(iq_image, dtype=np.complex64)\n\n    def __init__(self, input_file=\"\
      zjut.jpeg\", venctor_len=608):\n        gr.sync_block.__init__(\n          \
      \  self,\n            name='Embedded Python Block2',  # will show up in GRC\n\
      \            in_sig=[],\n            # \u4FEE\u6539\u8F93\u51FA\u4FE1\u53F7\u4E3A\
      \u5411\u91CF\u7C7B\u578B\uFF0C\u6BCF\u4E2A\u5411\u91CF\u957F\u5EA6\u4E3A\u5217\
      \u6570\n            out_sig=[(np.complex64, venctor_len)]\n        )\n     \
      \   self.iq_image = self._get_iq_image(input_file)\n        self.current_row\
      \ = 0\n        self.rows, self.columns = self.iq_image.shape\n        self.set_output_multiple(self.columns)\n\
      \n    def work(self, input_items, output_items):\n        o_len = len(output_items[0])\n\
      \        num_rows_to_send = o_len // self.columns\n        for i in range(num_rows_to_send):\n\
      \            if self.current_row >= self.rows:\n                self.current_row\
      \ = 0\n                print(\"one loop\")\n            output_items[0][i *\
      \ self.columns:(i + 1) * self.columns] = self.iq_image[self.current_row]\n \
      \           self.current_row += 1\n        return o_len\n\n"
    affinity: ''
    alias: ''
    comment: ''
    input_file: '"zjut.jpeg"'
    maxoutbuf: '0'
    minoutbuf: '0'
    venctor_len: img_width
  states:
    _io_cache: ('Embedded Python Block2', 'blk', [('input_file', "'zjut.jpeg'"), ('venctor_len',
      '608')], [], [('0', 'complex', 608)], 'Embedded Python Block example - convert
      image to frequency-domain data for waterfall plot', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 172.0]
    rotation: 0
    state: enabled
- name: fft_vxx_0
  id: fft_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fft_size: img_width
    forward: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    nthreads: '10'
    shift: 'True'
    type: complex
    window: window.blackmanharris(img_width)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 148.0]
    rotation: 0
    state: enabled
- name: qtgui_sink_x_0_0
  id: qtgui_sink_x
  parameters:
    affinity: ''
    alias: ''
    bw: samp_rate
    comment: ''
    fc: '0'
    fftsize: '1024'
    gui_hint: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    plotconst: 'True'
    plotfreq: 'True'
    plottime: 'True'
    plotwaterfall: 'True'
    rate: '10'
    showports: 'False'
    showrf: 'False'
    type: complex
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 148.0]
    rotation: 0
    state: enabled

connections:
- [blocks_vector_to_stream_0, '0', qtgui_sink_x_0_0, '0']
- [epy_block_1, '0', fft_vxx_0, '0']
- [fft_vxx_0, '0', blocks_vector_to_stream_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.11.0
